AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo

  Sample SAM Template for todo

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        TODO_TBL: !Ref TodoTBL
        AUTH_TBL: !Ref AuthTBL
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"


Resources:
  TodoTBL:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TODO_TABLE
      AttributeDefinitions:
        - AttributeName: login_token
          AttributeType: S
        - AttributeName: todo_id
          AttributeType: S
      KeySchema:
        - AttributeName: login_token
          KeyType: HASH
        - AttributeName: todo_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  AuthTBL:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: AUTH_TABLE
      AttributeDefinitions:
        - AttributeName: login_id
          AttributeType: S
      KeySchema:
        - AttributeName: login_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # TodoTBL:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     PrimaryKey: 
  #       Name: login_id
  #       Type: String
  # AuthTBL:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     PrimaryKey: 
  #       Name: login_id
  #       Type: String


  AuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: auth.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AuthTBL
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth
            Method: post

  AuthCreateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: auth_create.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthTBL
      Events:
        AuthCreate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth/create
            Method: post

  GetMyToDoFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: get_mytodo.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTBL
      Events:
        GetMyToDo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /todos
            Method: post

  CreateMyToDoFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: create_mytodo.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTBL
      Events:
        CreateMyTodo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /todos/create
            Method: post

  UpdateMyToDoFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: update_mytodo.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTBL
      Events:
        UpdateMyToDo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /todos/{todo_id}
            Method: put

  DeleteMyToDoFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: todo_api/
      Handler: delete_mytodo.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTBL
      Events:
        DeleteMyToDo:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /todos/{todo_id}
            Method: delete

  AuthFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AuthFunction}
      RetentionInDays: 7

  CreateFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateMyToDoFunction}
      RetentionInDays: 7

# iamRoleStatements:
#   - Effect: Allow
#     Action:
#       - dynamodb:DescribeTable
#       - dynamodb:Query
#       - dynamodb:Scan
#       - dynamodb:GetItem
#       - dynamodb:PutItem
#       - dynamodb:UpdateItem
#       - dynamodb:DeleteItem
#     # Restrict our IAM role permissions to
#     # the specific table for the stage
#     Resource: !Ref AuthTBL

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/todos/"
  # HelloWorldFunction:
  #   Description: "Hello World Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn
